filter(year == "2021", month == "3") %>%
group_by(year, month, day, date) %>%
summarize(count = sum(new_case), mean_case = mean(new_case)) %>%
transform( avg7 = rollmeanr(count, 7, fill = NA))
varName <- us_temp$plot_stat
x_axis_labels <- min(1):max(31)
us_temp %>%
ggplot(aes(x=day, y=count)) +
geom_col(color="darkblue", fill="lightblue",position = "dodge")  +
scale_x_continuous(labels = x_axis_labels, breaks = x_axis_labels, limits = c(1,31)) +
scale_y_continuous( varName, labels = scales::comma, breaks = function(x) unique(floor(pretty(seq(0, (max(x) + 1) * 1.1))))) +
labs(y = "plot_stat") +
geom_line(aes(x=day, y = avg7))
#seperate date and time for the api call one
Map <- uscovid %>%
separate(submission_date, c("date", "time"), sep = "T") %>%
mutate(date = as.Date(date, "%Y-%m-%d"))
Histogram <- Map %>%
mutate(tempDate = date) %>%
separate(tempDate, c("year", "month", "day")) %>%
mutate(day = as.integer(day), month = as.integer(month), year = as.integer(year)) %>%
transform( avg7 = rollmeanr(count, 7, fill = NA))
#seperate date and time for the api call one
Map <- uscovid %>%
separate(submission_date, c("date", "time"), sep = "T") %>%
mutate(date = as.Date(date, "%Y-%m-%d"))
Histogram <- Map %>%
mutate(tempDate = date) %>%
separate(tempDate, c("year", "month", "day")) %>%
mutate(day = as.integer(day), month = as.integer(month), year = as.integer(year)) %>%
transform(avg7 = rollmeanr(new_case, 7, fill = NA))
#Set NA to 0
Map[is.na(Map)] <- 0
my_map_theme <- function(){
theme(panel.background=element_blank(),
axis.text=element_blank(),
axis.ticks=element_blank(),
axis.title=element_blank())
}
my_stat <- "new_case"
my_stat
mys <- enquo(my_stat)
mys
us_temp <- Histogram %>%
filter(year == "2021", month == "3") %>%
group_by(year, month, day, date) %>%
summarize(count = sum(new_case), mean_case = mean(new_case))
varName <- us_temp$plot_stat
x_axis_labels <- min(1):max(31)
us_temp %>%
ggplot(aes(x=day, y=count)) +
geom_col(color="darkblue", fill="lightblue",position = "dodge")  +
scale_x_continuous(labels = x_axis_labels, breaks = x_axis_labels, limits = c(1,31)) +
scale_y_continuous( varName, labels = scales::comma, breaks = function(x) unique(floor(pretty(seq(0, (max(x) + 1) * 1.1))))) +
labs(y = "plot_stat") +
geom_line(aes(x=day, y = avg7))
my_stat <- "new_case"
my_stat
mys <- enquo(my_stat)
mys
us_temp <- Histogram %>%
filter(year == "2021", month == "3") %>%
group_by(year, month, day, date, avg7) %>%
summarize(count = sum(new_case), mean_case = mean(new_case))
varName <- us_temp$plot_stat
x_axis_labels <- min(1):max(31)
us_temp %>%
ggplot(aes(x=day, y=count)) +
geom_col(color="darkblue", fill="lightblue",position = "dodge")  +
scale_x_continuous(labels = x_axis_labels, breaks = x_axis_labels, limits = c(1,31)) +
scale_y_continuous( varName, labels = scales::comma, breaks = function(x) unique(floor(pretty(seq(0, (max(x) + 1) * 1.1))))) +
labs(y = "plot_stat") +
geom_line(aes(x=day, y = avg7))
#seperate date and time for the api call one
Map <- uscovid %>%
separate(submission_date, c("date", "time"), sep = "T") %>%
mutate(date = as.Date(date, "%Y-%m-%d"))
Histogram <- Map %>%
mutate(tempDate = date) %>%
separate(tempDate, c("year", "month", "day")) %>%
mutate(day = as.integer(day), month = as.integer(month), year = as.integer(year),
count = sum(new_case) ) %>%
transform(avg7 = rollmeanr(count, 7, fill = NA))
#Set NA to 0
Map[is.na(Map)] <- 0
my_map_theme <- function(){
theme(panel.background=element_blank(),
axis.text=element_blank(),
axis.ticks=element_blank(),
axis.title=element_blank())
}
my_stat <- "new_case"
my_stat
mys <- enquo(my_stat)
mys
us_temp <- Histogram %>%
filter(year == "2021", month == "3") %>%
group_by(year, month, day, date, avg7) %>%
summarize(count = sum(new_case), mean_case = mean(new_case))
varName <- us_temp$plot_stat
x_axis_labels <- min(1):max(31)
us_temp %>%
ggplot(aes(x=day, y=count)) +
geom_col(color="darkblue", fill="lightblue",position = "dodge")  +
scale_x_continuous(labels = x_axis_labels, breaks = x_axis_labels, limits = c(1,31)) +
scale_y_continuous( varName, labels = scales::comma, breaks = function(x) unique(floor(pretty(seq(0, (max(x) + 1) * 1.1))))) +
labs(y = "plot_stat") +
geom_line(aes(x=day, y = avg7))
#seperate date and time for the api call one
Map <- uscovid %>%
separate(submission_date, c("date", "time"), sep = "T") %>%
mutate(date = as.Date(date, "%Y-%m-%d"))
Histogram <- Map %>%
mutate(tempDate = date) %>%
separate(tempDate, c("year", "month", "day")) %>%
mutate(day = as.integer(day), month = as.integer(month), year = as.integer(year),
count = new_case ) %>%
transform(avg7 = rollmeanr(count, 7, fill = NA))
#Set NA to 0
Map[is.na(Map)] <- 0
my_map_theme <- function(){
theme(panel.background=element_blank(),
axis.text=element_blank(),
axis.ticks=element_blank(),
axis.title=element_blank())
}
my_stat <- "new_case"
my_stat
mys <- enquo(my_stat)
mys
us_temp <- Histogram %>%
filter(year == "2021", month == "3") %>%
group_by(year, month, day, date, avg7) %>%
summarize(count = sum(new_case), mean_case = mean(new_case))
varName <- us_temp$plot_stat
x_axis_labels <- min(1):max(31)
us_temp %>%
ggplot(aes(x=day, y=count)) +
geom_col(color="darkblue", fill="lightblue",position = "dodge")  +
scale_x_continuous(labels = x_axis_labels, breaks = x_axis_labels, limits = c(1,31)) +
scale_y_continuous( varName, labels = scales::comma, breaks = function(x) unique(floor(pretty(seq(0, (max(x) + 1) * 1.1))))) +
labs(y = "plot_stat") +
geom_line(aes(x=day, y = avg7))
runApp('C:/Users/Nez/Downloads/final Project.R')
runApp('C:/Users/Nez/Downloads/final Project.R')
runApp('C:/Users/Nez/Desktop/final/final Project.R')
runApp('C:/Users/Nez/Desktop/final/final Project.R')
runApp('C:/Users/Nez/Desktop/final2/Final_Project')
runApp('C:/Users/Nez/Desktop/final2/Final_Project')
runApp('C:/Users/Nez/Desktop/final2/Final_Project')
devtools::install_github("hrbrmstr/albersusa")
shiny::runApp('C:/Users/Nez/Desktop/final2/Final_Project')
runApp('C:/Users/Nez/Desktop/final2/Final_Project')
runApp('C:/Users/Nez/Desktop/final2/Final_Project')
runApp('C:/Users/Nez/Desktop/final2/Final_Project')
runApp('C:/Users/Nez/Desktop/final2/Final_Project')
runApp('C:/Users/Nez/Desktop/final2/Final_Project')
geom_col
?geom_col
?geom_sf
runApp('C:/Users/Nez/Desktop/final2/Final_Project')
library(tidyverse)
library(openintro)
library(albersusa)
library(plotly)
library(shiny)
library(lubridate)
uscovid <- read.csv("https://data.cdc.gov/resource/9mfq-cb36.csv?$limit=2000000")
#seperate date and time for the api call one
Map <- uscovid %>%
separate(submission_date, c("date", "time"), sep = "T") %>%
mutate(date = as.Date(date, "%Y-%m-%d"))
Histogram <- Map %>%
mutate(tempDate = date) %>%
separate(tempDate, c("year", "month", "day")) %>%
mutate(day = as.integer(day), month = as.integer(month), year = as.integer(year))
#Set NA to 0
Map[is.na(Map)] <- 0
my_map_theme <- function(){
theme(panel.background=element_blank(),
axis.text=element_blank(),
axis.ticks=element_blank(),
axis.title=element_blank())
}
covidmap <- function(myvar, mydate) {
#select data on my variable for a single date to create choropleth map
my_stat <- enquo(myvar)
if(myvar == "tot_death") {myvar <- "Cumulative Deaths"}
if(myvar == "new_case") {myvar <- "Positive Cases"}
if(myvar == "new_death") {myvar <- "Positive Deaths"}
covid_date <- Map %>%
filter(date == mydate) %>%
select(state, plot_stat = !!my_stat) %>%
mutate(text = paste("<b>", myvar ,":</b> ", plot_stat, sep=""))
us_states <- usa_sf("laea")
mapdata <- left_join(us_states, covid_date, by = c("iso_3166_2" = "state"))
m <- ggplot(mapdata) +
geom_sf(aes(fill = plot_stat, text = text)) +
scale_fill_continuous(myvar, low="yellow", high="red", labels = scales::comma) +
my_map_theme()
ggplotly(m, tooltip = "text") %>%
style(hoveron = "fill")
}
covidHist <- function(varChoices, varYear, varMonth) {
my_stat <- enquo(varChoices)
if(varChoices == "new_case") {
varTitle <- "Positive Cases"
covid_date_hist <- Histogram %>%
filter(year == varYear, month == varMonth) %>%
group_by(year, month, day, date) %>%
summarize(count = sum(new_case),
plot_stat = !!my_stat) %>%
mutate(text = paste("<b> Day:", day ,":</b>\nCount: ",
format(count,big.mark=",",scientific=FALSE), sep=""))
} else {
varTitle <- "Positive Deaths"
covid_date_hist <- Histogram %>%
filter(year == varYear, month == varMonth) %>%
group_by(year, month, day, date) %>%
summarize(count = sum(new_death),
plot_stat = !!my_stat) %>%
mutate(text = paste("<b> Day:", day ,":</b>\nCount: ",
format(count,big.mark=",",scientific=FALSE), sep=""))
}
x_axis_labels <- min(1):max(31)
h <-   ggplot(covid_date_hist, aes(x=day, y=count)) +
geom_col(color="darkblue", fill="lightblue",position = "dodge", text = text)  +
scale_x_continuous(labels = x_axis_labels, breaks = x_axis_labels, limits = c(1,31)) +
scale_y_continuous(varTitle, labels = scales::comma, breaks = function(x) unique(floor(pretty(seq(0, (max(x) + 1) * 1.1)))))
ggplotly(h, tooltip = "text") %>%
style(hoverlabel = list(bgcolor = "white"))
}
#Shiny
map_list <- list("Positive Cases" = "new_case",
"Positive Deaths" = "new_death",
"Cumulative Deaths" = "tot_death")
hist_list <- list("Positive Cases" = "new_case",
"Positive Death" = "new_death")
hist_year_list <- list("2020" = "2020",
"2021" = "2021",
"2022" = "2022")
hist_month_list <- list("January" = "1",
"February" = "2",
"March" = "3",
"April" = "4",
"May" = "5",
"June" = "6",
"July" = "7",
"August" = "8",
"September" = "9",
"October" = "10",
"November" = "11",
"December" = "12")
ui <- fluidPage(
# Application title
titlePanel("US COVID"),
tabsetPanel(id = "tab",
tabPanel(title = "US Covid Choropleth Map", value = "Map",
sidebarPanel(selectInput("myvar",
"Select a variable to display:",
choices = map_list,
selected = "new_case")),
sidebarPanel(sliderInput("mydate",
"Select a date to display:",
min = as.Date("2020-01-22", "%Y-%m-%d"),
max = as.Date("2022-03-03", "%Y-%m-%d"),
value = as.Date("2022-03-03", "%Y-%m-%d"))
)),
tabPanel(title = "US Covid Histogram", value = "Histogram",
sidebarPanel(selectInput("varChoices",
"Select a variable to display:",
choices = hist_list,
selected = "new_case")),
sidebarPanel(selectInput("varYear",
"Select a year to display:",
choices = hist_year_list,
selected = "2022")),
sidebarPanel(selectInput("varMonth",
"Select a month to display:",
choices = hist_month_list,
selected = "1"))
)
),
# Show our plot
mainPanel(
h3(textOutput("TitleText")),
plotlyOutput("statPlot")
)
)
# Define server logic required to create the graph
server <- function(input, output) {
output$TitleText <- renderText({
if(input$tab == "Map") {
varText <- input$myvar
if(varText == "tot_death") {varText <- "Cumulative Deaths"}
if(varText == "new_case") {varText <- "Positive Cases"}
if(varText == "new_death") {varText <- "Positive Deaths"}
}else{
varText <- input$myvar
if(varText == "new_case") {varText <- "Positive Cases"}
if(varText == "new_death") {varText <- "Positive Deaths"}
}
paste(varText, " Over Time")
})
output$statPlot <- renderPlotly({
if(input$tab == "Map"){
covidmap(input$myvar,input$mydate)
}
else {
covidHist(input$varChoices,input$varYear,input$varMonth)
}
})
}
shinyApp(ui = ui, server = server)
View(Histogram)
my_stat <- "new_case"
my_stat
mys <- enquo(my_stat)
mys
us_temp <- Histogram %>%
filter(year == "2021", month == "3") %>%
group_by(year, month, day, date) %>%
summarize(count = sum(new_case)) %>%
mutate(text = paste("<b> Day:", day ,":</b>\nCount: ",
format(count,big.mark=",",scientific=FALSE), sep=""))
varName <- us_temp$plot_stat
x_axis_labels <- min(1):max(31)
us_temp %>%
ggplot(aes(x=day, y=count)) +
geom_col(color="darkblue", fill="lightblue",position = "dodge")  +
scale_x_continuous(labels = x_axis_labels, breaks = x_axis_labels, limits = c(1,31)) +
scale_y_continuous( varName, labels = scales::comma, breaks = function(x) unique(floor(pretty(seq(0, (max(x) + 1) * 1.1))))) +
labs(y = "plot_stat")
my_stat <- "new_case"
my_stat
mys <- enquo(my_stat)
mys
us_temp <- Histogram %>%
filter(year == "2021", month == "3") %>%
group_by(year, month, day, date) %>%
summarize(count = sum(new_case)) %>%
mutate(text = paste("<b> Day:", day ,":</b>\nCount: ",
format(count,big.mark=",",scientific=FALSE), sep=""))
x_axis_labels <- min(1):max(31)
us_temp %>%
ggplot(aes(x=day, y=count)) +
geom_col(color="darkblue", fill="lightblue",position = "dodge")  +
scale_x_continuous(labels = x_axis_labels, breaks = x_axis_labels, limits = c(1,31)) +
scale_y_continuous( 1, labels = scales::comma, breaks = function(x) unique(floor(pretty(seq(0, (max(x) + 1) * 1.1))))) +
labs(y = "plot_stat")
library(tidyverse)
library(openintro)
library(albersusa)
library(plotly)
library(shiny)
library(lubridate)
uscovid <- read.csv("https://data.cdc.gov/resource/9mfq-cb36.csv?$limit=2000000")
#seperate date and time for the api call one
Map <- uscovid %>%
separate(submission_date, c("date", "time"), sep = "T") %>%
mutate(date = as.Date(date, "%Y-%m-%d"))
Histogram <- Map %>%
mutate(tempDate = date) %>%
separate(tempDate, c("year", "month", "day")) %>%
mutate(day = as.integer(day), month = as.integer(month), year = as.integer(year))
#Set NA to 0
Map[is.na(Map)] <- 0
my_map_theme <- function(){
theme(panel.background=element_blank(),
axis.text=element_blank(),
axis.ticks=element_blank(),
axis.title=element_blank())
}
covidmap <- function(myvar, mydate) {
#select data on my variable for a single date to create choropleth map
my_stat <- enquo(myvar)
if(myvar == "tot_death") {myvar <- "Cumulative Deaths"}
if(myvar == "new_case") {myvar <- "Positive Cases"}
if(myvar == "new_death") {myvar <- "Positive Deaths"}
covid_date <- Map %>%
filter(date == mydate) %>%
select(state, plot_stat = !!my_stat) %>%
mutate(text = paste("<b>", myvar ,":</b> ", plot_stat, sep=""))
us_states <- usa_sf("laea")
mapdata <- left_join(us_states, covid_date, by = c("iso_3166_2" = "state"))
m <- ggplot(mapdata) +
geom_sf(aes(fill = plot_stat, text = text)) +
scale_fill_continuous(myvar, low="yellow", high="red", labels = scales::comma) +
my_map_theme()
ggplotly(m, tooltip = "text") %>%
style(hoveron = "fill")
}
covidHist <- function(varChoices, varYear, varMonth) {
my_stat <- enquo(varChoices)
if(varChoices == "new_case") {
varTitle <- "Positive Cases"
covid_date_hist <- Histogram %>%
filter(year == varYear, month == varMonth) %>%
group_by(year, month, day, date) %>%
summarize(count = sum(new_case),
plot_stat = !!my_stat) %>%
mutate(text = paste("<b> Day:", day ,":</b>\nCount: ",
format(count,big.mark=",",scientific=FALSE), sep=""))
} else {
varTitle <- "Positive Deaths"
covid_date_hist <- Histogram %>%
filter(year == varYear, month == varMonth) %>%
group_by(year, month, day, date) %>%
summarize(count = sum(new_death),
plot_stat = !!my_stat) %>%
mutate(text = paste("<b> Day:", day ,":</b>\nCount: ",
format(count,big.mark=",",scientific=FALSE), sep=""))
}
x_axis_labels <- min(1):max(31)
h <-   ggplot(covid_date_hist, aes(x=day, y=count)) +
geom_col(color="darkblue", fill="lightblue",position = "dodge", text = text)  +
scale_x_continuous(labels = x_axis_labels, breaks = x_axis_labels, limits = c(1,31)) +
scale_y_continuous(varTitle, labels = scales::comma, breaks = function(x) unique(floor(pretty(seq(0, (max(x) + 1) * 1.1)))))
ggplotly(h, tooltip = c("text")) %>%
style(hoverinfo = "none", traces = 3)
}
#Shiny
map_list <- list("Positive Cases" = "new_case",
"Positive Deaths" = "new_death",
"Cumulative Deaths" = "tot_death")
hist_list <- list("Positive Cases" = "new_case",
"Positive Death" = "new_death")
hist_year_list <- list("2020" = "2020",
"2021" = "2021",
"2022" = "2022")
hist_month_list <- list("January" = "1",
"February" = "2",
"March" = "3",
"April" = "4",
"May" = "5",
"June" = "6",
"July" = "7",
"August" = "8",
"September" = "9",
"October" = "10",
"November" = "11",
"December" = "12")
ui <- fluidPage(
# Application title
titlePanel("US COVID"),
tabsetPanel(id = "tab",
tabPanel(title = "US Covid Choropleth Map", value = "Map",
sidebarPanel(selectInput("myvar",
"Select a variable to display:",
choices = map_list,
selected = "new_case")),
sidebarPanel(sliderInput("mydate",
"Select a date to display:",
min = as.Date("2020-01-22", "%Y-%m-%d"),
max = as.Date("2022-03-03", "%Y-%m-%d"),
value = as.Date("2022-03-03", "%Y-%m-%d"))
)),
tabPanel(title = "US Covid Histogram", value = "Histogram",
sidebarPanel(selectInput("varChoices",
"Select a variable to display:",
choices = hist_list,
selected = "new_case")),
sidebarPanel(selectInput("varYear",
"Select a year to display:",
choices = hist_year_list,
selected = "2022")),
sidebarPanel(selectInput("varMonth",
"Select a month to display:",
choices = hist_month_list,
selected = "1"))
)
),
# Show our plot
mainPanel(
h3(textOutput("TitleText")),
plotlyOutput("statPlot")
)
)
# Define server logic required to create the graph
server <- function(input, output) {
output$TitleText <- renderText({
if(input$tab == "Map") {
varText <- input$myvar
if(varText == "tot_death") {varText <- "Cumulative Deaths"}
if(varText == "new_case") {varText <- "Positive Cases"}
if(varText == "new_death") {varText <- "Positive Deaths"}
}else{
varText <- input$myvar
if(varText == "new_case") {varText <- "Positive Cases"}
if(varText == "new_death") {varText <- "Positive Deaths"}
}
paste(varText, " Over Time")
})
output$statPlot <- renderPlotly({
if(input$tab == "Map"){
covidmap(input$myvar,input$mydate)
}
else {
covidHist(input$varChoices,input$varYear,input$varMonth)
}
})
}
shinyApp(ui = ui, server = server)
runApp('C:/Users/Nez/Desktop/final2/Final_Project')
runApp('C:/Users/Nez/Downloads/Baseball_App_v4.R')
runApp('C:/Users/Nez/Desktop/final2/Final_Project')
runApp('C:/Users/Nez/Desktop/final2/Final_Project')
runApp('C:/Users/Nez/Desktop/final2/Final_Project')
shiny::runApp('C:/Users/Nez/Desktop/final2/Final_Project')
runApp('C:/Users/Nez/Desktop/final2/Final_Project')
shiny::runApp()
runApp('C:/Users/Nez/Downloads')
